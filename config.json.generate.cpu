cat << CTAG
{
	name:CPU,
		elements:[
			{ STitleBar:{
				title:"CPU Frequency Scaling"
			}},
				`if [ -f "/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies" ] && [ -f "/sys/devices/system/cpu/cpu4/cpufreq/scaling_available_frequencies" ]; then
					$BB echo '{ SSpacer:{
						height: 1
					}},
					{ SLiveLabel:{
						refresh:0,
						style:italic,
						action:"live CpuClusterA53"
					}},'
					$BB echo '{ SSeekBar:{
						title:"CPU Min Frequency A53",
						description:"Set the minimum frequency the CPU scales down to.",
						default:'\`sh $DEVICE DefaultCPUMinFrequencyA53\`',
						action:"cpuset '\`sh $DEVICE DirCPUMinFrequencyA53\`'",
						values:{'
							sh $DEVICE CPUFrequencyListA53
						$BB echo }'
					}},'
					$BB echo '{ SSeekBar:{
						title:"CPU Max Frequency A53",
						description:"Set the maximum frequency the CPU scales up to.",
						default:'\`sh $DEVICE DefaultCPUMaxFrequencyA53\`',
						action:"cpuset '\`sh $DEVICE DirCPUMaxFrequencyA53\`'",
						values:{'
							sh $DEVICE CPUFrequencyListA53
						$BB echo }'
					}},'
					$BB echo '{ SSpacer:{
						height: 2
					}},
					{ SLiveLabel:{
						refresh:0,
						style:italic,
						action:"live CpuClusterA57"
					}},'
					$BB echo '{ SSeekBar:{
						title:"CPU Min Frequency A57",
						description:"Set the minimum frequency the CPU scales down to.",
						default:'\`sh $DEVICE DefaultCPUMinFrequencyA57\`',
						action:"cpuset '\`sh $DEVICE DirCPUMinFrequencyA57\`'",
						values:{'
							sh $DEVICE CPUFrequencyListA57
						$BB echo }'
					}},'
					$BB echo '{ SSeekBar:{
						title:"CPU Max Frequency A57",
						description:"Set the maximum frequency the CPU scales up to.",
						default:'\`sh $DEVICE DefaultCPUMaxFrequencyA57\`',
						action:"cpuset '\`sh $DEVICE DirCPUMaxFrequencyA57\`'",
						values:{'
							sh $DEVICE CPUFrequencyListA57
						$BB echo }'
					}},'
					$BB echo '{ SSpacer:{
						height: 1
					}},'
				fi`
				`if [ -d "/sys/module/cpu_boost/parameters" ]; then
					$BB echo '{ SPane:{
							title:"CPU Boost Tunables"
						}},
					{ SLiveLabel:{
						refresh:0,
						style:italic,
						action:"live CpuBoost"
					}},'
					if [ -f "/sys/module/cpu_boost/parameters/cpu_boost" ]; then
					CPUBOOST=\`$BB cat /sys/module/cpu_boost/parameters/cpu_boost\`;
						$BB echo '{ SCheckBox:{
							label:"Enable",
							description:"An in kernel replacement for Qualcomms MPDecision. Developed by Cyanogenmod.",
							default:'$CPUBOOST',
							action:"generic /sys/module/cpu_boost/parameters/cpu_boost"
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/cpuboost_enable" ]; then
					CPUBOOSTE=\`bool /sys/module/cpu_boost/parameters/cpuboost_enable\`;
						$BB echo '{ SCheckBox:{
							label:"Enable",
							description:"Enable/Disable CPU Boost",
							default:'$CPUBOOSTE',
							action:"boolean /sys/module/cpu_boost/parameters/cpuboost_enable"
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/debug_mask" ]; then
					DEBUG=\`$BB cat /sys/module/cpu_boost/parameters/debug_mask\`
						echo '{ SCheckBox:{
								label:"Debug Mask",
								description:"Allows you to activate debug mask for CPU Boost operations.",
								default:'$DEBUG',
								action:"generic /sys/module/cpu_boost/parameters/debug_mask"
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/boost_ms" ]; then
					BOOSTMS=\`$BB cat /sys/module/cpu_boost/parameters/boost_ms\`
						$BB echo '{ SSeekBar:{
								title:"Boost",
								description:"Minimum interval a CPU is boosted.",
								unit:" ms",
								min:0,
								max:5000,
								step:10,
								default:'$BOOSTMS',
								action:"generic /sys/module/cpu_boost/parameters/boost_ms"
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/sync_threshold" ]; then
					SYNCT=\`$BB cat /sys/module/cpu_boost/parameters/sync_threshold\`
						$BB echo '{ SSeekBar:{
							title:"Sync Threshold",
							description:"When CPU loading crosses the preset threshold, the current CPU is raised to this frequency.",
							default:'$SYNCT',
							action:"generic /sys/module/cpu_boost/parameters/sync_threshold",
							values:{ 0:"Disabled", '
								sh $DEVICE CPUFrequencyList
							$BB echo '}
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/input_boost_ms" ]; then
					SYNCT=\`$BB cat /sys/module/cpu_boost/parameters/input_boost_ms\`
						$BB echo '{ SSeekBar:{
								title:"Input Boost",
								description:"Minimum interval a CPU is boosted when input is detected.",
								unit:" ms",
								min:0,
								max:5000,
								step:10,
								default:'$SYNCT',
								action:"generic /sys/module/cpu_boost/parameters/input_boost_ms"
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/min_input_interval" ]; then
					MBOOSTINT=\`$BB cat /sys/module/cpu_boost/parameters/min_input_interval\`
						$BB echo '{ SSeekBar:{
								title:"Min Input Interval",
								description:"Minimum Input Interval between touches.",
								unit:" ms",
								min:100,
								max:1500,
								step:10,
								default:'$MBOOSTINT',
								action:"generic /sys/module/cpu_boost/parameters/min_input_interval"
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/input_boost_freq" ]; then
					
					VALUE=0; for i in \`$BB cat /sys/module/cpu_boost/parameters/input_boost_freq\`; do VALUE=$(($VALUE+1)); done;
					
						if [ $VALUE -eq 1 ]; then
							IBF=\`$BB cat /sys/module/cpu_boost/parameters/input_boost_freq\`
							
							$BB echo '{ SSeekBar:{
								title:"Input Boost Frequency",
								description:"This will boost your minimum CPU speed to the selected frequency when you touch the screen or press a button.",
								default:'$IBF',
								action:"generic /sys/module/cpu_boost/parameters/input_boost_freq",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyList
								$BB echo '}
							}},'
						elif [ $VALUE -eq 8 ]; then
							$BB echo '{ SSeekBar:{
								title:"CPU0 Input Boost Frequency",
								action:"cpuboostibf 0",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA53
								$BB echo '}
							}},
							{ SSeekBar:{
								title:"CPU1 Input Boost Frequency",
								action:"cpuboostibf 1",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA53
								$BB echo '}
							}},
							{ SSeekBar:{
								title:"CPU2 Input Boost Frequency",
								action:"cpuboostibf 2",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA53
								$BB echo '}
							}},
							{ SSeekBar:{
								title:"CPU3 Input Boost Frequency",
								action:"cpuboostibf 3",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA53
								$BB echo '}
							}},
							{ SSeekBar:{
								title:"CPU4 Input Boost Frequency",
								action:"cpuboostibf 4",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA57
								$BB echo '}
							}},
							{ SSeekBar:{
								title:"CPU5 Input Boost Frequency",
								action:"cpuboostibf 5",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA57
								$BB echo '}
							}},
							{ SSeekBar:{
								title:"CPU6 Input Boost Frequency",
								action:"cpuboostibf 6",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA57
								$BB echo '}
							}},
							{ SSeekBar:{
								title:"CPU7 Input Boost Frequency",
								action:"cpuboostibf 7",
								values:{ 0:"Disabled", '
									sh $DEVICE CPUFrequencyListA57
								$BB echo '}
							}},'
						fi;
					fi;
					if [ -f "/sys/module/cpu_boost/parameters/migration_load_threshold" ]; then
					MLT=\`$BB cat /sys/module/cpu_boost/parameters/migration_load_threshold\`
						$BB echo '{ SSeekBar:{
								title:"Migration Load Threshold",
								description:"The amount of load before migrate tasks to another cpu.",
								min:0,
								max:100,
								step:1,
								default:'$MLT',
								action:"generic /sys/module/cpu_boost/parameters/migration_load_threshold"
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/load_based_syncs" ]; then
					LBS=\`bool /sys/module/cpu_boost/parameters/load_based_syncs\`
						$BB echo '{ SCheckBox:{
							label:"Load Based Syncs",
							description:"The cpu boost driver can use this load to compute a suitable frequency for the migrating task.",
							default:'$LBS',
							action:"boolean /sys/module/cpu_boost/parameters/load_based_syncs",
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/sched_boost_on_input" ]; then
					SBOI=\`bool /sys/module/cpu_boost/parameters/sched_boost_on_input\`
						$BB echo '{ SCheckBox:{
							label:"Scheduler Boost on Input",
							description:"Enable scheduler boost to migrate tasks to big cluster.",
							default:'$SBOI',
							action:"boolean /sys/module/cpu_boost/parameters/sched_boost_on_input",
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/hotplug_boost" ]; then
					HB=\`bool /sys/module/cpu_boost/parameters/hotplug_boost\`
						$BB echo '{ SCheckBox:{
							label:"Hotplug Boost",
							description:"Hotplug Boost is similar to input boost but it occurs when CPUs go online.",
							default:'$HB',
							action:"boolean /sys/module/cpu_boost/parameters/hotplug_boost",
						}},'
					fi
					if [ -f "/sys/module/cpu_boost/parameters/wakeup_boost" ]; then
					WB=\`bool /sys/module/cpu_boost/parameters/wakeup_boost\`
						$BB echo '{ SCheckBox:{
							label:"Wakeup Boost",
							description:"Wakeup Boost is similar to input boost but it occurs when screen is turned on.",
							default:'$WB',
							action:"boolean /sys/module/cpu_boost/parameters/wakeup_boost",
						}},'
					fi
					$BB echo '{ SSpacer:{
						height: 1
					}},'
					if [ -f "/sys/module/cpu_boost/parameters/sysctl_thermal_aware_scheduling" ]; then
					STAS=\`bool /sys/module/cpu_boost/parameters/sysctl_thermal_aware_scheduling\`
						$BB echo '{ SGeneric:{
							title:"Thermal Aware Scheduling",
							description:"Balancing the workloads between both the bigger and smaller cores within the SoC regardless of the thermal conditions.",
							default:'$STAS',
							action:"generic /sys/module/cpu_boost/parameters/sysctl_thermal_aware_scheduling",
						}},'
					fi
				fi`
				`if [ -f "/sys/module/workqueue/parameters/power_efficient" ]; then
				PE=\`bool /sys/module/workqueue/parameters/power_efficient\`
					$BB echo '{ SPane:{
						title:"Power-efficient Workqueues",
					}},
						{ SCheckBox:{
							label:"Enable",
							description:"This will help to reduce power consumption at the cost of slight performance overhead. PE workqueues are used for unbound scheduled work to save load on sibling CPU cores and queuing work on CPU0.",
							default:'$PE',
							action:"boolean /sys/module/workqueue/parameters/power_efficient",
						}},'
				fi`
				{ SSpacer:{
						height: 1
				}},
			{ SPane:{
				title:"CPU Governor Tunables",
			}},
				`if [ -f "/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies" ] && [ -f "/sys/devices/system/cpu/cpu4/cpufreq/scaling_available_frequencies" ]; then
					$BB echo '{ SSpacer:{
						height: 1
					}},
					{ SLiveLabel:{
						refresh:0,
						style:italic,
						action:"live CpuClusterA53"
					}},
					{ SSpacer:{
						height: 1
					}},
					{ SOptionList:{
						default:'\`sh $DEVICE DefaultCPUGovernorA53\`',
						action:"cpuset '\`sh $DEVICE DirCPUGovernorA53\`'",
						values:['
							sh $DEVICE CPUGovernorList
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, CANCEL ],
								to:"'\`sh $DEVICE DirCPUGovernorTreeA53\`'"
							},
							{
								on:REFRESH,
								do:REFRESH,
								to:"'\`sh $DEVICE DirCPUGovernorTreeA53\`'"
							}
						]
					}},'
				fi`
				{ SSpacer:{
					height: 2
				}},
				{ STreeDescriptor:{
					path:"`sh $DEVICE DirCPUGovernorTreeA53`",
					generic: {
						directory: {
							STreeDescriptor:{
								generic: {
									directory: {},
									element: {
										SGeneric: { title:"@BASENAME" }
									}
								},
								exclude: [ 
									"boost_duration", "boostpulse", "cpu_utilization", "multi_phase_freq_tbl", "profile",
									"up_threshold_h", "up_threshold_l", "version_profiles", "sampling_rate_current", "freq_limit",
									"music_state", "inputboost_punch_cycles", "inputboost_punch_freq", "inputboost_punch_on_epenmove",
									"inputboost_punch_on_fingerdown", "inputboost_punch_on_fingermove", "auto_adjust_freq_thresholds",
									"version", "early_demand", "fast_scaling_up", "fast_scaling_down", "fast_scaling_sleep_up", "fast_scaling_sleep_down"
									"scaling_up_block_freq", "scaling_block_freq", "inputboost_typingbooster_cores", "music_max_freq", "music_min_freq"
								]
							},
						}
					},
					exclude: [ "all_cpus", "kset", "overall_stats", "stats", "vdd_table" ]
				}},
				{ SSpacer:{
						height: 1
				}},
			{ SPane:{
				title:"CPU Governor Tunables",
			}},
				`if [ -f "/sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies" ] && [ -f "/sys/devices/system/cpu/cpu4/cpufreq/scaling_available_frequencies" ]; then
					$BB echo '{ SSpacer:{
						height: 1
					}},
					{ SLiveLabel:{
						refresh:0,
						style:italic,
						action:"live CpuClusterA57"
					}},
					{ SSpacer:{
						height: 1
					}},
					{ SOptionList:{
						default:'\`sh $DEVICE DefaultCPUGovernorA57\`',
						action:"cpuset '\`sh $DEVICE DirCPUGovernorA57\`'",
						values:['
							sh $DEVICE CPUGovernorList
						$BB echo '],
						notify:[
							{
								on:APPLY,
								do:[ REFRESH, CANCEL ],
								to:"'\`sh $DEVICE DirCPUGovernorTreeA57\`'"
							},
							{
								on:REFRESH,
								do:REFRESH,
								to:"'\`sh $DEVICE DirCPUGovernorTreeA57\`'"
							}
						]
					}},'
				fi`
				{ SSpacer:{
					height: 2
				}},
				{ STreeDescriptor:{
					path:"`sh $DEVICE DirCPUGovernorTreeA57`",
					generic: {
						directory: {
							STreeDescriptor:{
								generic: {
									directory: {},
									element: {
										SGeneric: { title:"@BASENAME" }
									}
								},
								exclude: [ 
									"boost_duration", "boostpulse", "cpu_utilization", "multi_phase_freq_tbl", "profile",
									"up_threshold_h", "up_threshold_l", "version_profiles", "sampling_rate_current", "freq_limit",
									"music_state", "inputboost_punch_cycles", "inputboost_punch_freq", "inputboost_punch_on_epenmove",
									"inputboost_punch_on_fingerdown", "inputboost_punch_on_fingermove", "auto_adjust_freq_thresholds",
									"version", "early_demand", "fast_scaling_up", "fast_scaling_down", "fast_scaling_sleep_up", "fast_scaling_sleep_down"
									"scaling_up_block_freq", "scaling_block_freq", "inputboost_typingbooster_cores", "music_max_freq", "music_min_freq"
								]
							},
						}
					},
					exclude: [ "all_cpus", "kset", "overall_stats", "stats", "vdd_table" ]
				}},
				{ SSpacer:{
						height: 1
				}},
		]
}
CTAG
